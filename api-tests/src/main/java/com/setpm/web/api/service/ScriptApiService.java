package com.setpm.web.api.service;

import com.github.javafaker.Faker;
import com.setpm.web.api.model.scriptModel.Script;
import com.setpm.web.api.model.scriptModel.ScriptUpdated;
import io.qameta.allure.restassured.AllureRestAssured;
import io.restassured.RestAssured;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import io.restassured.http.ContentType;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class ScriptApiService {

    public RequestSpecification setup() {
        return RestAssured.given()
                .contentType(ContentType.JSON)
                .filters(new RequestLoggingFilter(),
                        new ResponseLoggingFilter(),
                        new AllureRestAssured());
    }

    // get list of all scripts
    public ValidatableResponse getScriptsList() {
        return setup()
                .when()
                .get("content-service/scripts")
                .then();
    }

    // post a new script object
    public ValidatableResponse postNewScript(Script script) {
        return setup()
                .body(script)
                .when()
                .post("content-service/scripts")
                .then();
    }

    // create a new script object
    public Script createNewScript() {
        Faker faker = new Faker();
        return new Script()
                .setScriptName("Auto generated script " + faker.idNumber().valid())
                .setDescription("Autotest scripts")
                .setScriptType("KCSS")
                .setScript("Test script");
    }

    // get script id from a response
    public String getScriptId(ValidatableResponse validatableResponse) {
        return validatableResponse.extract().path("id");
    }

    // get script by id
    public ValidatableResponse getScriptById(String id) {
        return setup()
                .when()
                .get("content-service/scripts/" + id)
                .then();
    }

    // update script by id
    public ValidatableResponse updateScriptById(String id) {
        Faker faker = new Faker();

        ScriptUpdated scriptUpdated = new ScriptUpdated()
                .setId(id)
                .setDescription("Updated autogenerated script")
                .setScript("Test script")
                .setScriptName("Updated autogenerated script " + faker.idNumber().valid());

        return setup()
                .body(scriptUpdated)
                .when()
                .put("content-service/scripts/" + id)
                .then();
    }

    // delete script by id
    public ValidatableResponse delteScriptById(String id) {
        return setup()
                .when()
                .delete("content-service/scripts/" + id)
                .then();
    }



}
